<script>

    var renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: true
    });
    renderer.setClearColor(new THREE.Color('lightgrey'), 0)
    renderer.setSize(640, 480);
    renderer.domElement.style.position = 'absolute'
    renderer.domElement.style.top = '0px'
    renderer.domElement.style.left = '0px'
    document.body.appendChild(renderer.domElement);

    // array of functions for the rendering loop
    var onRenderFcts = [];

    // init scene and camera
    var scene = new THREE.Scene();

    var camera = new THREE.Camera();
    scene.add(camera);

    var arToolkitSource = new THREEx.ArToolkitSource({
        sourceType: 'webcam',
    })

    arToolkitSource.init(function onReady() {
        arToolkitSource.onResize(renderer.domElement)
    })

    window.addEventListener('resize', function () {
        arToolkitSource.onResize(renderer.domElement)
    })

    var arToolkitContext = new THREEx.ArToolkitContext({
        cameraParametersUrl: '../../Patterns/camera_para.dat',
        detectionMode: 'mono',
    })

    arToolkitContext.init(function onCompleted() {
        camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());
    })

    onRenderFcts.push(function () {
        if (arToolkitSource.ready === false) return

        arToolkitContext.update(arToolkitSource.domElement)
        scene.visible = camera.visible
    })

    var markerControls = new THREEx.ArMarkerControls(arToolkitContext, camera, {
        type: 'pattern',
        patternUrl: '../../Patterns/nj.pat',
        changeMatrixMode: 'cameraTransformMatrix'
    })

    scene.visible = false

    var directionalLight = new THREE.DirectionalLight(0xffeedd);
    directionalLight.position.set(1,1,1);
    scene.add(directionalLight);


    var loader = new THREE.OBJLoader();
    //loader.load('/Images/Street environment_V01.obj', function (object) {
    //    scene.add(object);
    //});
     
    var mtlLoader = new THREE.MTLLoader();
    mtlLoader.setBaseUrl('/Images/');
    mtlLoader.setPath('/Images/');
    var url = "office.mtl";
    mtlLoader.load(url, function (materials) {

        materials.preload();

        var objLoader = new THREE.OBJLoader();
        objLoader.setMaterials(materials);
        objLoader.setPath('/Images/');
        objLoader.load('office.obj', function (object) {

            //object.position.y = -150;
            scene.add(object);

        }, onProgress, onError);

    });

    var onProgress = function (xhr) {
        if (xhr.lengthComputable) {
            //var percentComplete = xhr.loaded / xhr.total * 100;
            //console.log(Math.round(percentComplete, 2) + '% downloaded');
        }
    };

    var onError = function (xhr) { };

    onRenderFcts.push(function () {
        renderer.render(scene, camera);
    })

    var lastTimeMsec = null
    requestAnimationFrame(function animate(nowMsec) {
        requestAnimationFrame(animate);
        lastTimeMsec = lastTimeMsec || nowMsec - 1000 / 60
        var deltaMsec = Math.min(200, nowMsec - lastTimeMsec)
        lastTimeMsec = nowMsec
        onRenderFcts.forEach(function (onRenderFct) {
            onRenderFct(deltaMsec / 1000, nowMsec / 1000)
        })
    })
</script>