<script>

	var renderer	= new THREE.WebGLRenderer({
		antialias	: true,
		alpha: true
	});
	renderer.setClearColor(new THREE.Color('lightgrey'), 0)
	renderer.setSize( 640, 480 );
	renderer.domElement.style.position = 'absolute'
	renderer.domElement.style.top = '0px'
	renderer.domElement.style.left = '0px'
	document.body.appendChild( renderer.domElement );

	// array of functions for the rendering loop
	var onRenderFcts= [];

	// init scene and camera
	var scene	= new THREE.Scene();

	var camera = new THREE.Camera();
	scene.add(camera);

	var arToolkitSource = new THREEx.ArToolkitSource({
		// to read from the webcam
		sourceType : 'webcam',

		// // to read from an image
		// sourceType : 'image',
		// sourceUrl : '../../data/images/img.jpg',

		// to read from a video
		// sourceType : 'video',
		// sourceUrl : '../../data/videos/headtracking.mp4',
	})

	arToolkitSource.init(function onReady(){ 
		arToolkitSource.onResize(renderer.domElement)
	})
     
	window.addEventListener('resize', function(){ 
		arToolkitSource.onResize(renderer.domElement)
	})

	var arToolkitContext = new THREEx.ArToolkitContext({
		cameraParametersUrl: '../../Patterns/camera_para.dat',
		detectionMode: 'mono',
	})

	arToolkitContext.init(function onCompleted(){ 
		camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );
	})
     
	onRenderFcts.push(function(){
		if( arToolkitSource.ready === false )	return

		arToolkitContext.update( arToolkitSource.domElement ) 
		scene.visible = camera.visible
	})

	var markerControls = new THREEx.ArMarkerControls(arToolkitContext, camera, {
		type : 'pattern',
		patternUrl : '../../Patterns/nj.pat',
		changeMatrixMode: 'cameraTransformMatrix'
	})

	scene.visible = false
     
	var geometry	= new THREE.CubeGeometry(1,1,1);
	var material	= new THREE.MeshNormalMaterial({
		transparent : true,
		opacity: 0.5,
		side: THREE.DoubleSide
	});
	var mesh	= new THREE.Mesh( geometry, material );
	mesh.position.y	= geometry.parameters.height/2
	scene.add( mesh );

	var geometry	= new THREE.TorusKnotGeometry(0.3,0.1,32,32);
	var material	= new THREE.MeshNormalMaterial();
	var mesh	= new THREE.Mesh( geometry, material );
	mesh.position.y	= 0.5
	scene.add( mesh );

	onRenderFcts.push(function(delta){
		mesh.rotation.x += Math.PI*delta
	})

	onRenderFcts.push(function(){
		renderer.render( scene, camera );
	})

	var lastTimeMsec= null
	requestAnimationFrame(function animate(nowMsec){ 
		requestAnimationFrame( animate ); 
		lastTimeMsec	= lastTimeMsec || nowMsec-1000/60
		var deltaMsec	= Math.min(200, nowMsec - lastTimeMsec)
		lastTimeMsec	= nowMsec 
		onRenderFcts.forEach(function(onRenderFct){
			onRenderFct(deltaMsec/1000, nowMsec/1000)
		})
	})
</script>